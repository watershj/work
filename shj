# -*- coding: utf-8 -*-
"""
Created on Tue Aug  4 16:57:45 2020

@author: T00393
"""

from PyQt5.QtCore import  *
from PyQt5.QtGui import  *
from PyQt5.QtWidgets import  *


import matplotlib.pyplot as plt

plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
plt.rcParams['axes.unicode_minus']=False #用来正常显示负



import matplotlib
matplotlib.use("Qt5Agg")  # 声明使用QT5
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


import csv

import numpy as np




class MyWindow(QWidget):
    def __init__(self):
        super(MyWindow,self).__init__()
        self.resize(1000, 650)
        self.setWindowTitle("数据可视化")
        layout = QGridLayout()
        # layout.setSpacing(10)


########################################################
        quit = QPushButton('退出',self)
        quit.clicked.connect(QCoreApplication.instance().quit)
        # quit.move(10, 600)


        file = QPushButton('选择文件',self)               #选择键
        file.clicked.connect(self.showDialog)
        # file.move(10, 10)


        # 添加原生QWidget
        self.widget = QWidget(self) # 注意QWidget(self) 内的self!!
        # self.widget.setGeometry(100,10,850,500)
        self.widget.setStyleSheet("background-color:white;")


        label_start_number = QLabel('起始行号',self)
        self.label_start_number = QLineEdit("258",self) # 注意QLineEdit("0",self) 内的self!!

        label_readrow_number = QLabel('每次要读的行数',self)
        self.label_readrow_number = QLineEdit("35",self) 

        label_readcol_number = QLabel('每次要读的列数',self)
        self.label_readcol_number = QLineEdit("9",self) 

        label_list = QLabel("所取段数(从0开始)",self)
        self.label_list = QLineEdit()


        label_x_number = QLabel('横坐标所取列数（从0开始）',self)
        self.label_x_number = QLineEdit("0",self)

        label_y_number = QLabel('纵坐标所取列数',self)
        self.label_y_number = QLineEdit("6",self)

        label_title = QLabel('图表命名',self)
        self.label_title = QLineEdit("s1y_LPDDR5_NTN_SV1_25 id-VG Curve-Vtlin",self)

        label_x_name = QLabel('横坐标命名',self)
        self.label_x_name = QLineEdit("Sweep Voltage",self)

        label_y_name = QLabel('纵坐标命名',self)
        self.label_y_name = QLineEdit("Drain Current",self)

        label_line_name = QLabel('图例命名',self)
        self.label_line_name = QLineEdit("NSA#",self)

        label_vds = QLabel('vds',self)
        self.label_vds = QLineEdit("0.05",self)

        label_worktype = QLabel()
        label_worktype.setText("工作模式")
        self.label_worktype = QComboBox(self)
        self.label_worktype.addItem("原始图同个文件")
        self.label_worktype.addItem("原始图不同文件")
        self.label_worktype.addItem("vtgm")
        self.label_worktype.addItem("vtlin")


###########################计算结果显示######################################

        result = QLabel('计算结果输出：',self)

        result_vtgm = QLabel('vtgm',self)
        self.result_vtgm = QLineEdit()



#########################################################################
        self.gridLayout_2 = QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)  # 在gridLayoutWidget 上创建一个网格Layout，注意以gridLayoutWidget为参
        self.gridLayout_2.setObjectName("gridLayout_2")
        # ===通过graphicview来显示图形
        self.graphicview = QGraphicsView(self.widget)  # 第一步，创建一个QGraphicsView，注意同样以gridLayoutWidget为参
        self.graphicview.setObjectName("graphicview")
        self.gridLayout_2.addWidget(self.graphicview, 0, 0) # 第二步，将该QGraphicsView放入Layout中

#####################################################
        # 放入布局内
        layout.addWidget(self.widget,0,0,1,8)     #参数表示控件名，行，列，占用行数，占用列数

        layout.addWidget(file,1,0)
        layout.addWidget(quit,1,1)

        layout.addWidget(label_worktype,1,2)
        layout.addWidget(self.label_worktype,1,3)

        layout.addWidget(label_start_number,2,0)
        layout.addWidget(self.label_start_number,2,1)

        layout.addWidget(label_list,2,2)
        layout.addWidget(self.label_list,2,3)

        layout.addWidget(label_readrow_number,2,4)
        layout.addWidget(self.label_readrow_number,2,5)

        layout.addWidget(label_readcol_number,2,6)
        layout.addWidget(self.label_readcol_number,2,7)

        layout.addWidget(label_x_number,3,0)
        layout.addWidget(self.label_x_number,3,1)

        layout.addWidget(label_y_number,3,2)
        layout.addWidget(self.label_y_number,3,3)

        layout.addWidget(label_x_name,4,0)
        layout.addWidget(self.label_x_name,4,1)

        layout.addWidget(label_y_name,4,2)
        layout.addWidget(self.label_y_name,4,3)

        layout.addWidget(label_title,4,4)
        layout.addWidget(self.label_title,4,5)

        layout.addWidget(label_line_name,4,6)
        layout.addWidget(self.label_line_name,4,7)


        layout.addWidget(label_vds,5,0)
        layout.addWidget(self.label_vds,5,1)



        layout.addWidget(result,7,0,1,4)

        layout.addWidget(result_vtgm,8,0)
        layout.addWidget(self.result_vtgm,8,1)



        # layout.setColumnStretch(0, 0.5)     #设置   横
        # layout.setColumnStretch(1, 1)

        # layout.setRowStretch(0, 1)         #设置 竖直
        # layout.setRowStretch(1, 1)
        self.setLayout(layout)

#####################################################
    def showDialog(self):

        start_number= int(self.label_start_number.text())
        print(start_number)

        readrow_number= int(self.label_readrow_number.text())
        print(readrow_number)

        readcol_number= int(self.label_readcol_number.text())
        print(readcol_number)


        x_number= int(self.label_x_number.text())
        print(x_number)

        y_number= int(self.label_y_number.text())
        print(y_number)

        list_number= self.label_list.text()
        list_number=list_number.split()
        list_number= [int(i) for i in list_number]
        print(len(list_number))
        print(list_number)

        title= self.label_title.text()
        x_name= self.label_x_name.text()
        y_name= self.label_y_name.text()
        print(title)
        print(x_name)
        print(y_name)

        line_name= self.label_line_name.text()

        vds= float(self.label_vds.text())

        if self.label_worktype.currentText() == "原始图同个文件":
            worktype = 1
        elif self.label_worktype.currentText() == "原始图不同文件":
            worktype = 2
        elif self.label_worktype.currentText() == "vtgm":
            worktype = 3
        else:
            worktype = 4





#########################################################################
        dr = Figure_Canvas(self) #实例化一个FigureCanvas
        dr.test(start_number,readrow_number,readcol_number,x_number,y_number,list_number,title,x_name,y_name,line_name,vds,worktype)  # 画图

        graphicscene = QGraphicsScene()  # 第三步，创建一个QGraphicsScene，因为加载的图形（FigureCanvas）不能直接放到graphicview控件中，必须先放到graphicScene，然后再把graphicscene放到graphicview中
        graphicscene.addWidget(dr)  # 第四步，把图形放到QGraphicsScene中，注意：图形是作为一个QWidget放到QGraphicsScene中的
        self.graphicview.setScene(graphicscene) # 第五步，把QGraphicsScene放入QGraphicsView
        self.graphicview.show()  # 最后，调用show方法呈现图形！Voila!!

########################################################################

class Figure_Canvas(FigureCanvas):   # 通过继承FigureCanvas类，使得该类既是一个PyQt5的Qwidget，又是一个matplotlib的FigureCanvas，这是连接pyqt5与matplot                                          lib的关键

    def __init__(self,mw):
        self.mw = mw                            #重要      返回参数
        #第一步：创建一个创建Figure
        self.fig = Figure(figsize=(8, 4))   #,width=9, height=4, dpi=70
        #第二步：在父类中激活Figure窗口
        super(Figure_Canvas,self).__init__(self.fig) #此句必不可少，否则不能显示图形
        #第三步：创建一个子图，用于绘制图形用，111表示子图编号，如matlab的subplot(1,1,1)
        self.axes = self.fig.add_subplot(111)


    def test(self,start_number,readrow_number,readcol_number,x_number,y_number,list_number,title,x_name,y_name,line_name,vds,worktype):

        # file,filetype= QFileDialog.getOpenFileNames(self,'open file', '/') #获得选择好的文件

######################取具体的区间的数据##############
        # for n in range(0,len(list_number)):

                if  worktype == 1:
                    file,filetype= QFileDialog.getOpenFileName(self,'open file', '/') #获得选择好的文件
                    for n in range(0,len(list_number)):

                        with open(file,'r',encoding='utf8')as fp:
                        # 使用列表推导式，将读取到的数据装进列表
                            data_list = [i for i in csv.reader(fp)]  # csv.reader 读取到的数据是list类型
                            datapro=data_list [start_number-1+list_number[n]*readrow_number:start_number-1+(list_number[n]+1)*readrow_number]       #确定数据范围 258 ---642-258+1
                            data_middle= [[] for _ in range(0,readcol_number)]     #取某一条件下的数据
                            for i in range(0,readcol_number):
                              for j in range(0,readrow_number):
                                data_middle[i].append(  datapro[j][i]   )
                            data_output=data_middle [1:readcol_number]
            
                            x = data_output[x_number]
                            x= [float(i) for i in x]    #str转float  影响作图
                            print(x)
                            print("\n")
                        
                            y = data_output[y_number]#获取列内容
                            y= [float(i) for i in y]
                            print(y)
                            print("\n")
        
                            self.axes.set_yscale("log")
                            self.axes.plot(x, y,label =str( line_name) + str(n))
        
                            for tick in self.axes.yaxis.get_major_ticks():
                                tick.label1.set_fontproperties('stixgeneral')
        
                            self.axes.set_title(str(title),fontsize=18)
                            self.axes.set_xlabel(str(x_name), fontsize=18,fontfamily = 'sans-serif',fontstyle='italic')
                            self.axes.set_ylabel(str(y_name), fontsize='x-large',fontstyle='oblique')
                            self.axes.legend()

                elif  worktype == 2:
                    file,filetype= QFileDialog.getOpenFileNames(self,'open file', '/') #获得选择好的文件
                    for n in range(0,len(list_number)):

                        with open(file[n],'r',encoding='utf8')as fp:
                        # 使用列表推导式，将读取到的数据装进列表
                            data_list = [i for i in csv.reader(fp)]  # csv.reader 读取到的数据是list类型
                            datapro=data_list [start_number-1+list_number[n]*readrow_number:start_number-1+(list_number[n]+1)*readrow_number]       #确定数据范围 258 ---642-258+1
                            data_middle= [[] for _ in range(0,readcol_number)]     #取某一条件下的数据
                            for i in range(0,readcol_number):
                              for j in range(0,readrow_number):
                                data_middle[i].append(  datapro[j][i]   )
                            data_output=data_middle [1:readcol_number]
            
                            x = data_output[x_number]
                            x= [float(i) for i in x]    #str转float  影响作图
                            print(x)
                            print("\n")
                        
                            y = data_output[y_number]#获取列内容
                            y= [float(i) for i in y]
                            print(y)
                            print("\n")
        
                            self.axes.set_yscale("log")
                            self.axes.plot(x, y,label =str( line_name) + str(n))
        
                            for tick in self.axes.yaxis.get_major_ticks():
                                tick.label1.set_fontproperties('stixgeneral')
        
                            self.axes.set_title(str(title),fontsize=18)
                            self.axes.set_xlabel(str(x_name), fontsize=18,fontfamily = 'sans-serif',fontstyle='italic')
                            self.axes.set_ylabel(str(y_name), fontsize='x-large',fontstyle='oblique')
                            self.axes.legend()


                elif worktype == 3:

                    file,filetype= QFileDialog.getOpenFileNames(self,'open file', '/') #获得选择好的文件
                    for n in range(0,len(list_number)):

                        with open(file[n],'r',encoding='utf8')as fp:
                        # 使用列表推导式，将读取到的数据装进列表
                            data_list = [i for i in csv.reader(fp)]  # csv.reader 读取到的数据是list类型
                            datapro=data_list [start_number-1+list_number[n]*readrow_number:start_number-1+(list_number[n]+1)*readrow_number]       #确定数据范围 258 ---642-258+1
                            data_middle= [[] for _ in range(0,readcol_number)]     #取某一条件下的数据
                            for i in range(0,readcol_number):
                              for j in range(0,readrow_number):
                                data_middle[i].append(  datapro[j][i]   )
                            data_output=data_middle [1:readcol_number]
            
                            x = data_output[x_number]
                            x= [float(i) for i in x]    #str转float  影响作图
                            print(x)
                            print("\n")
                        
                            y = data_output[y_number]#获取列内容
                            y= [float(i) for i in y]
                            print(y)
                            print("\n")
        
                            GM= np.diff(y)/np.diff(x)
                            GM=GM.tolist()
                            GM_index=GM.index(max(GM))
        
        
                            intercept=  -y[GM_index]/GM[GM_index]  +x[GM_index]
                            vtgm=intercept-0.5*vds
                            self.mw.result_vtgm.setText(str(vtgm))        #将类使用 才能传递
        
                            tangentline=GM[GM_index]*(np.asarray(x)-x[GM_index])+  y[GM_index]
            
                            self.axes.plot(x, y)
                            self.axes.plot(x[:-1], GM)
                            self.axes.axvline(x=x[GM_index])#添加垂直直线
                            self.axes.plot(x, tangentline)
        
        
                            for tick in self.axes.yaxis.get_major_ticks():
                                tick.label1.set_fontproperties('stixgeneral')
        
                            self.axes.set_title(str(title),fontsize=8)
                            self.axes.set_xlabel(str(x_name), fontsize=8,fontfamily = 'sans-serif',fontstyle='italic')
                            self.axes.set_ylabel(str(y_name), fontsize=8,fontstyle='oblique')
                            self.axes.legend()

                else:
                    print(x)




##################################################################
if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    dialog = MyWindow()
    dialog.show();
    sys.exit(app.exec_())




